function CheckHash() {
    var hash = getNormalizedPath();
    if (hash == "") {
        tHashCheck.SetEnabled(false);
        document.location = HomePage;
        return;
    }

	var oldHash = hfOldHash.Get("oldHash");
	if (!_aspxIsExists(oldHash)) oldHash = "";

	if ((hash.indexOf('#') == 0  && hash != oldHash) || ( oldHash.replace(/#.*$/, '') != hash.replace(/#.*$/, ''))) {
		hfOldHash.Set("oldHash", hash);
		hfOldHash.Set('clickedFromTreeList', 'false');
		ReadingHash();
	}
}
function ReadingHash() {
    var hash = getNormalizedPath();

    if (_aspxIsExists(mainCallbackPanel) && !mainCallbackPanel.InCallback()) {
        if (lpMain.GetVisible())
            lpMain.Hide();

        mainCallbackPanel.PerformCallback(hash);

        if (_aspxIsExists(hfOldHash.Get('clickedFromTreeList')) && hfOldHash.Get('clickedFromTreeList') == 'true') {
            if (treeList.GetNodeState(GetActiveNodeKey()) == 'Collapsed') {
                treeList.ExpandNode(GetActiveNodeKey());
            }
        }
    }
}
function getNormalizedPath() {
    return Decode(document.location.pathname.substring(AppPath.length).replace(/^\/|\/$/g, '') + document.location.hash);
}
function Decode(str) {
    return decodeURIComponent(str.replace(/\+/g, " "));
}
// called by link click (in document or tree)
function ChangeHashPageType(newHash) {
    if (window.history && window.history.pushState) {
        if (AppPath + newHash == document.location.pathname) return;
        history.pushState({ urlPath: AppPath + newHash }, "", AppPath + newHash);
        //mainCallbackPanel.PerformCallback(newHash);
    } else
        document.location.pathname = AppPath + newHash;
}

function SetAttentionOnTreeListNode() {
    var activeTopicId = GetActiveNodeKey();
    if (activeTopicId != null && activeTopicId != '') {
        var element = treeList.GetNodeHtmlElement(activeTopicId);
        if (element != null) {
            var offset = _aspxGetAbsoluteY(element);
            if (offset > 0) {
                var pane = dxspMain.GetPaneByName('treeList');
                if (pane != null) {
                    var paneElement = pane.GetElement();
                    if (paneElement != null && paneElement.firstChild != null) {
                        var paneHeight = pane.GetClientHeight();
                        if (paneHeight > 0 && offset > paneHeight) {
                            var center = Math.round(paneHeight / 2);
                            if ((offset - center) > 0) {
                                paneElement.firstChild.scrollTop = offset - center;
                            }
                        }
                    }
                }
            }
        }
    }
}

function SetAttentionOnMainArea(path) {
	var pane = dxspMain.GetPaneByName('main');
	if (pane == null) return;
	var paneElement = pane.GetElement();
	if (paneElement == null) return;
	var scrollElement = $(paneElement).find("div");
	var scrollPosition = 0;
	if (path.indexOf('#') > -1) {
	    var anchor = scrollElement.find('a[name="' + path.substring(path.indexOf('#') + 1) + '"]');
	    if (anchor.length > 0) scrollPosition = anchor.offset().top - 50;
	    if (scrollPosition < 0) return;
    }
	if (scrollPosition > 0) {
		scrollPosition += scrollElement.scrollTop();
	}
	scrollElement.scrollTop(scrollPosition);
	//scrollElement.animate({ scrollTop: scrollPosition }, 100);
}

function treeList_BeginCallback(event, args) {
    treeList.xflastCommand = args.command;
    $(treeList.GetMainElement()).addClass("Updating");
    if (!lpTree.GetVisible()) {
        lpTree.ShowInElement(document.getElementById('TreeTopics'));
    }
}
function treeList_EndCallback(event) {
    if (lpTree.GetVisible()) {
        lpTree.Hide();
    }
    $(treeList.GetMainElement()).removeClass("Updating");

    HighlightActiveTreelistNode();
    if (treeList.xflastCommand == "Expand" || treeList.xflastCommand == "Collapse") return;
    SetAttentionOnTreeListNode();
}
function HighlightActiveTreelistNode() {
    $(treeList.GetMainElement()).find("a[id$='_hl'][class='active']").removeClass("active");
    var activeTopicId = GetActiveNodeKey();
    if (activeTopicId != null && activeTopicId != '') {
        var activeTopicElement = treeList.GetNodeHtmlElement(activeTopicId);
        if (activeTopicElement != null) {
            var link = activeTopicElement.getElementsByTagName('A');
            if (link != null && link.length > 0 && link[0] != null && link[0].parentNode != null) {
                //link[0].parentNode.style.backgroundColor = '#8D8D8D';
                //link[0].parentNode.style.border = 'Solid 1px #CFCFCF';
                link[0].className = 'active';
            }
        }
    }
}
function TreeListItemClicked() {
    var pane = dxspMain.GetPaneByName('main');
    if (pane != null) {
        var paneElement = pane.GetElement();
        if (paneElement != null && paneElement.firstChild != null) {
            paneElement.firstChild.scrollTop = 0;
        }
    }
}

function mainCallbackPanel_BeginCallback(s, o) {
	// Hook
    if (typeof DX != 'undefined' && typeof DX.Tabs != 'undefined') {
        $(s.GetMainElement()).addClass("Updating");
		DX.Tabs.registry = [];
		if (!lpMain.GetVisible()) {
		    //console.info("Main LP shown");
			lpMain.ShowInElement(dxspMain.GetPaneByName('main').GetElement());
		}
	}
}
function MainCallbackPanel_EndCallback(s, o) {
	var redirect = hfGate.Get("Redirect");
	hfGate.Set("Redirect", "");
	if (typeof redirect != 'undefined' && redirect != "") {
	    document.location.replace(redirect);
		return;
	}
	if (_aspxIsExists(hfGate)) {
		var title = hfGate.Get("title");
		title = title.replace(/&lt;/g, "<");
		title = title.replace(/&gt;/g, ">");
		document.title = title;
	}

	$(s.GetMainElement()).removeClass("Updating");
	dxspMain.GetPaneByName('main').RaiseResizedEvent();
	if (lpMain.GetVisible()) {
		lpMain.Hide();
	}
	// refresh treelist if document changed from outside
	//if (hfOldHash.Get('clickedFromTreeList') != 'true') {
	//	hfOldHash.Set('clickedFromTreeList', 'false');
	//	treeCallbackPanel.PerformCallback();
	//}
    // always update tree
	treeList.PerformCallback(GetActiveNodeKey());
	//treeCallbackPanel.PerformCallback();

	SetAttentionOnMainArea(getNormalizedPath());
}

function dxspMain_Init() {
    pFakeSplitter.SetVisible(false);
    HighlightActiveTreelistNode();
}

function GetActiveNodeKey() {
    var ret = null;
    var activeTopicId = hfGate.Get('topicId');
    if (activeTopicId != null && activeTopicId != '') {
        ret = activeTopicId.replace(/_/gi, '-');
    }
    return ret;
}